 import { useState } from 'react'
import { Button } from "/components/ui/button"
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from "/components/ui/card"
import { Input } from "/components/ui/input"
import { Label } from "/components/ui/label"
import { ShoppingCart, User, Lock, Truck, CreditCard, Wallet, Banknote, Check } from 'lucide-react'

type Product = {
  id: number
  name: string
  price: number
  description: string
  imageUrl: string
}

type CartItem = {
  product: Product
  quantity: number
}

type Order = {
  id: string
  items: CartItem[]
  total: number
  paymentMethod: string
  trackingId: string
  status: 'processing' | 'shipped' | 'delivered'
  estimatedDelivery: string
}

const mockProducts: Product[] = [
  {
    id: 1,
    name: 'Wireless Headphones',
    price: 99.99,
    description: 'Premium noise-cancelling wireless headphones with 30-hour battery life',
    imageUrl: 'https://images.unsplash.com/photo-1505740420928-5e560c06d30e?w=500&auto=format&fit=crop&q=60&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8M3x8aGVhZHBob25lc3xlbnwwfHwwfHx8MA%3D%3D'
  },
  {
    id: 2,
    name: 'Smart Watch',
    price: 199.99,
    description: 'Fitness tracking smartwatch with heart rate monitor and GPS',
    imageUrl: 'https://images.unsplash.com/photo-1523275335684-37898b6baf30?w=500&auto=format&fit=crop&q=60&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8Mnx8d2F0Y2h8ZW58MHx8MHx8fDA%3D'
  },
  {
    id: 3,
    name: 'Bluetooth Speaker',
    price: 59.99,
    description: 'Portable waterproof speaker with 20-hour playtime',
    imageUrl: 'https://images.unsplash.com/photo-1572569511254-d8f925fe2cbb?w=500&auto=format&fit=crop&q=60&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8NHx8c3BlYWtlcnxlbnwwfHwwfHx8MA%3D%3D'
  },
  {
    id: 4,
    name: 'Phone Stand',
    price: 19.99,
    description: 'Adjustable phone stand for comfortable viewing angles',
    imageUrl: 'https://images.unsplash.com/photo-1601784551446-66c8e1b252b6?w=500&auto=format&fit=crop&q=60&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8Mnx8cGhvbmUlMjBzdGFuZHxlbnwwfHwwfHx8MA%3D%3D'
  }
]

export default function ConnectedStore() {
  const [products] = useState<Product[]>(mockProducts)
  const [cart, setCart] = useState<CartItem[]>([])
  const [isLoggedIn, setIsLoggedIn] = useState(false)
  const [showLogin, setShowLogin] = useState(false)
  const [username, setUsername] = useState('')
  const [password, setPassword] = useState('')
  const [activeTab, setActiveTab] = useState<'products' | 'cart' | 'payment' | 'tracking'>('products')
  const [selectedPayment, setSelectedPayment] = useState<string | null>(null)
  const [order, setOrder] = useState<Order | null>(null)

  const addToCart = (product: Product) => {
    setCart(prevCart => {
      const existingItem = prevCart.find(item => item.product.id === product.id)
      if (existingItem) {
        return prevCart.map(item =>
          item.product.id === product.id
            ? { ...item, quantity: item.quantity + 1 }
            : item
        )
      }
      return [...prevCart, { product, quantity: 1 }]
    })
  }

  const removeFromCart = (productId: number) => {
    setCart(prevCart => prevCart.filter(item => item.product.id !== productId))
  }

  const updateQuantity = (productId: number, newQuantity: number) => {
    if (newQuantity < 1) {
      removeFromCart(productId)
      return
    }
    setCart(prevCart =>
      prevCart.map(item =>
        item.product.id === productId
          ? { ...item, quantity: newQuantity }
          : item
      )
    )
  }

  const totalItems = cart.reduce((sum, item) => sum + item.quantity, 0)
  const subtotal = cart.reduce((sum, item) => sum + (item.product.price * item.quantity), 0)

  const handleLogin = (e: React.FormEvent) => {
    e.preventDefault()
    if (username && password) {
      setIsLoggedIn(true)
      setShowLogin(false)
      setUsername('')
      setPassword('')
    }
  }

  const handleLogout = () => {
    setIsLoggedIn(false)
    setOrder(null)
    setActiveTab('products')
  }

  const handleCheckout = () => {
    if (!isLoggedIn) {
      setShowLogin(true)
      return
    }
    setActiveTab('payment')
  }

  const handlePayment = () => {
    if (!selectedPayment) return
    
    // Generate a random tracking ID
    const trackingId = `TRK${Math.floor(100000 + Math.random() * 900000)}`
    
    // Create a new order
    const newOrder: Order = {
      id: `ORD${Math.floor(1000 + Math.random() * 9000)}`,
      items: [...cart],
      total: subtotal,
      paymentMethod: selectedPayment,
      trackingId,
      status: 'processing',
      estimatedDelivery: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000).toLocaleDateString()
    }
    
    setOrder(newOrder)
    setCart([])
    setActiveTab('tracking')
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white shadow-sm">
        <div className="container mx-auto px-4 py-4 flex justify-between items-center">
          <h1 className="text-xl font-bold text-primary">Connected Store</h1>
          <div className="flex items-center space-x-4">
            <button 
              onClick={() => setActiveTab('cart')}
              className="relative p-2 rounded-full hover:bg-gray-100"
            >
              <ShoppingCart className="h-5 w-5" />
              {totalItems > 0 && (
                <span className="absolute -top-1 -right-1 bg-primary text-white text-xs rounded-full h-5 w-5 flex items-center justify-center">
                  {totalItems}
                </span>
              )}
            </button>
            {isLoggedIn ? (
              <Button variant="outline" onClick={handleLogout}>
                Logout
              </Button>
            ) : (
              <Button variant="outline" onClick={() => setShowLogin(true)}>
                Login
              </Button>
            )}
          </div>
        </div>
      </header>

      {/* Navigation */}
      <nav className="bg-white shadow-sm">
        <div className="container mx-auto px-4">
          <div className="flex space-x-4">
            <button
              onClick={() => setActiveTab('products')}
              className={`py-3 px-4 font-medium ${activeTab === 'products' ? 'text-primary border-b-2 border-primary' : 'text-gray-600'}`}
            >
              Products
            </button>
            <button
              onClick={() => setActiveTab('cart')}
              className={`py-3 px-4 font-medium ${activeTab === 'cart' ? 'text-primary border-b-2 border-primary' : 'text-gray-600'}`}
            >
              Cart ({totalItems})
            </button>
            {isLoggedIn && (
              <>
                {order ? (
                  <button
                    onClick={() => setActiveTab('tracking')}
                    className={`py-3 px-4 font-medium ${activeTab === 'tracking' ? 'text-primary border-b-2 border-primary' : 'text-gray-600'}`}
                  >
                    Tracking
                  </button>
                ) : (
                  <button
                    onClick={() => cart.length > 0 && setActiveTab('payment')}
                    className={`py-3 px-4 font-medium ${activeTab === 'payment' ? 'text-primary border-b-2 border-primary' : 'text-gray-600'} ${cart.length === 0 ? 'opacity-50 cursor-not-allowed' : ''}`}
                    disabled={cart.length === 0}
                  >
                    Payment
                  </button>
                )}
              </>
            )}
          </div>
        </div>
      </nav>

      {/* Main Content */}
      <main className="container mx-auto px-4 py-8">
        {/* Login Modal */}
        {showLogin && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <Card className="w-full max-w-md">
              <CardHeader>
                <CardTitle className="text-center">Login</CardTitle>
              </CardHeader>
              <CardContent>
                <form onSubmit={handleLogin} className="space-y-4">
                  <div className="space-y-2">
                    <Label htmlFor="username">Username</Label>
                    <Input
                      id="username"
                      value={username}
                      onChange={(e) => setUsername(e.target.value)}
                      placeholder="Enter your username"
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="password">Password</Label>
                    <Input
                      id="password"
                      type="password"
                      value={password}
                      onChange={(e) => setPassword(e.target.value)}
                      placeholder="Enter your password"
                    />
                  </div>
                  <div className="flex justify-between pt-4">
                    <Button
                      type="button"
                      variant="outline"
                      onClick={() => setShowLogin(false)}
                    >
                      Cancel
                    </Button>
                    <Button type="submit">Login</Button>
                  </div>
                </form>
              </CardContent>
            </Card>
          </div>
        )}

        {/* Products Tab */}
        {activeTab === 'products' && (
          <div>
            <h2 className="text-2xl font-bold mb-6">Our Products</h2>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {products.map(product => (
                <Card key={product.id} className="hover:shadow-lg transition-shadow">
                  <CardHeader>
                    <div className="aspect-square overflow-hidden rounded-lg">
                      <img 
                        src={product.imageUrl} 
                        alt={product.name}
                        className="w-full h-full object-cover"
                      />
                    </div>
                  </CardHeader>
                  <CardContent className="space-y-2">
                    <h3 className="font-semibold text-lg">{product.name}</h3>
                    <p className="text-gray-600 line-clamp-2">{product.description}</p>
                    <p className="font-bold text-primary">${product.price.toFixed(2)}</p>
                  </CardContent>
                  <CardFooter>
                    <Button
                      onClick={() => addToCart(product)}
                      className="w-full"
                    >
                      Add to Cart
                    </Button>
                  </CardFooter>
                </Card>
              ))}
            </div>
          </div>
        )}

        {/* Cart Tab */}
        {activeTab === 'cart' && (
          <div>
            <h2 className="text-2xl font-bold mb-6">Your Cart ({totalItems} items)</h2>
            {cart.length === 0 ? (
              <div className="text-center py-12">
                <ShoppingCart className="mx-auto h-12 w-12 text-gray-400" />
                <h3 className="mt-2 text-lg font-medium text-gray-900">Your cart is empty</h3>
                <p className="mt-1 text-gray-500">Start adding some products to your cart</p>
                <Button
                  onClick={() => setActiveTab('products')}
                  className="mt-6"
                >
                  Browse Products
                </Button>
              </div>
            ) : (
              <div className="space-y-6">
                <div className="bg-white rounded-lg shadow overflow-hidden">
                  <ul className="divide-y divide-gray-200">
                    {cart.map(item => (
                      <li key={item.product.id} className="p-4">
                        <div className="flex items-center">
                          <div className="w-16 h-16 rounded-lg overflow-hidden flex-shrink-0">
                            <img 
                              src={item.product.imageUrl} 
                              alt={item.product.name}
                              className="w-full h-full object-cover"
                            />
                          </div>
                          <div className="ml-4 flex-1">
                            <h3 className="font-medium">{item.product.name}</h3>
                            <p className="text-gray-600">${item.product.price.toFixed(2)}</p>
                          </div>
                          <div className="flex items-center space-x-2">
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => updateQuantity(item.product.id, item.quantity - 1)}
                            >
                              -
                            </Button>
                            <span className="w-8 text-center">{item.quantity}</span>
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => updateQuantity(item.product.id, item.quantity + 1)}
                            >
                              +
                            </Button>
                            <Button
                              variant="ghost"
                              size="sm"
                              onClick={() => removeFromCart(item.product.id)}
                              className="text-red-500"
                            >
                              Remove
                            </Button>
                          </div>
                        </div>
                      </li>
                    ))}
                  </ul>
                </div>
                <div className="bg-white rounded-lg shadow p-4">
                  <div className="flex justify-between items-center">
                    <h3 className="font-medium">Subtotal</h3>
                    <p className="font-bold">${subtotal.toFixed(2)}</p>
                  </div>
                  <Button 
                    onClick={handleCheckout}
                    className="w-full mt-4"
                  >
                    {isLoggedIn ? 'Proceed to Payment' : 'Login to Checkout'}
                  </Button>
                </div>
              </div>
            )}
          </div>
        )}

        {/* Payment Tab */}
        {activeTab === 'payment' && isLoggedIn && (
          <div>
            <h2 className="text-2xl font-bold mb-6">Payment Method</h2>
            <Card>
              <CardHeader>
                <CardTitle>Select Payment Method</CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div 
                  onClick={() => setSelectedPayment('credit_card')}
                  className={`flex items-center space-x-4 p-4 border rounded-lg cursor-pointer ${selectedPayment === 'credit_card' ? 'border-primary bg-primary/10' : 'hover:bg-gray-50'}`}
                >
                  <CreditCard className="h-6 w-6 text-primary" />
                  <span>Credit Card</span>
                </div>
                <div 
                  onClick={() => setSelectedPayment('paypal')}
                  className={`flex items-center space-x-4 p-4 border rounded-lg cursor-pointer ${selectedPayment === 'paypal' ? 'border-primary bg-primary/10' : 'hover:bg-gray-50'}`}
                >
                  <Wallet className="h-6 w-6 text-primary" />
                  <span>PayPal</span>
                </div>
                <div 
                  onClick={() => setSelectedPayment('bank_transfer')}
                  className={`flex items-center space-x-4 p-4 border rounded-lg cursor-pointer ${selectedPayment === 'bank_transfer' ? 'border-primary bg-primary/10' : 'hover:bg-gray-50'}`}
                >
                  <Banknote className="h-6 w-6 text-primary" />
                  <span>Bank Transfer</span>
                </div>
              </CardContent>
              <CardFooter className="justify-end">
                <Button 
                  onClick={handlePayment}
                  disabled={!selectedPayment}
                >
                  Complete Payment
                </Button>
              </CardFooter>
            </Card>
          </div>
        )}

        {/* Tracking Tab */}
        {activeTab === 'tracking' && order && (
          <div>
            <h2 className="text-2xl font-bold mb-6">Order Tracking</h2>
            <Card>
              <CardHeader>
                <CardTitle>Order #{order.id}</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-6">
                  {/* Order Summary */}
                  <div>
                    <h3 className="font-medium text-lg mb-2">Order Summary</h3>
                    <div className="space-y-4">
                      {order.items.map(item => (
                        <div key={item.product.id} className="flex items-center">
                          <div className="w-12 h-12 rounded-lg overflow-hidden mr-4">
                            <img 
                              src={item.product.imageUrl} 
                              alt={item.product.name}
                              className="w-full h-full object-cover"
                            />
                          </div>
                          <div className="flex-1">
                            <p className="font-medium">{item.product.name}</p>
                            <p className="text-gray-600">{item.quantity} × ${item.product.price.toFixed(2)}</p>
                          </div>
                          <p className="font-medium">${(item.quantity * item.product.price).toFixed(2)}</p>
                        </div>
                      ))}
                    </div>
                    <div className="border-t mt-4 pt-4 flex justify-between">
                      <p className="font-medium">Total</p>
                      <p className="font-bold">${order.total.toFixed(2)}</p>
                    </div>
                  </div>

                  {/* Payment Method */}
                  <div>
                    <h3 className="font-medium text-lg mb-2">Payment Method</h3>
                    <div className="flex items-center space-x-2">
                      {order.paymentMethod === 'credit_card' && <CreditCard className="h-5 w-5" />}
                      {order.paymentMethod === 'paypal' && <Wallet className="h-5 w-5" />}
                      {order.paymentMethod === 'bank_transfer' && <Banknote className="h-5 w-5" />}
                      <span className="capitalize">
                        {order.paymentMethod.replace('_', ' ')}
                      </span>
                    </div>
                  </div>

                  {/* Tracking Info */}
                  <div>
                    <h3 className="font-medium text-lg mb-2">Tracking Information</h3>
                    <div className="flex items-center space-x-4 p-4 bg-gray-50 rounded-lg">
                      <Truck className="h-8 w-8 text-primary" />
                      <div>
                        <p className="font-medium">Status: {order.status}</p>
                        <p className="text-gray-600">Tracking ID: {order.trackingId}</p>
                        <p className="text-gray-600">Estimated Delivery: {order.estimatedDelivery}</p>
                      </div>
                    </div>
                  </div>

                  {/* Order Status Steps */}
                  <div>
                    <h3 className="font-medium text-lg mb-4">Order Status</h3>
                    <div className="space-y-4">
                      <div className="flex items-center space-x-4">
                        <div className={`rounded-full h-8 w-8 flex items-center justify-center ${order.status === 'processing' ? 'bg-primary text-white' : 'bg-gray-200'}`}>
                          <Check className="h-4 w-4" />
                        </div>
                        <div>
                          <p className="font-medium">Order Placed</p>
                          <p className="text-gray-600 text-sm">Your order has been received</p>
                        </div>
                      </div>
                      <div className="flex items-center space-x-4">
                        <div className={`rounded-full h-8 w-8 flex items-center justify-center ${order.status === 'shipped' ? 'bg-primary text-white' : 'bg-gray-200'}`}>
                          {order.status === 'shipped' && <Check className="h-4 w-4" />}
                        </div>
                        <div>
                          <p className="font-medium">Shipped</p>
                          <p className="text-gray-600 text-sm">Your order is on its way</p>
                        </div>
                      </div>
                      <div className="flex items-center space-x-4">
                        <div className={`rounded-full h-8 w-8 flex items-center justify-center ${order.status === 'delivered' ? 'bg-primary text-white' : 'bg-gray-200'}`}>
                          {order.status === 'delivered' && <Check className="h-4 w-4" />}
                        </div>
                        <div>
                          <p className="font-medium">Delivered</p>
                          <p className="text-gray-600 text-sm">Your order has been delivered</p>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </CardContent>
              <CardFooter className="justify-end">
                <Button 
                  variant="outline"
                  onClick={() => setActiveTab('products')}
                >
                  Continue Shopping
                </Button>
              </CardFooter>
            </Card>
          </div>
        )}
      </main>

      {/* Footer */}
      <footer className="bg-white border-t mt-8">
        <div className="container mx-auto px-4 py-6">
          <p className="text-center text-gray-600">
            &copy; 2023 Connected Store. All rights reserved.
          </p>
        </div>
      </footer>
    </div>
  )
}
